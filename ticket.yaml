swagger: '2.0'
info:
  version: 2.0.3
  title: BoB.Ticket.API
host: schemas.mobileticket.se
basePath: /api/v2
schemes:
  - https
paths:
  '/ticket':
    get:
      tags:
        - ticket
      summary: Get issued tickets
      description: |
        Get all issued tickets that meets the requirements specified by the
        parameters. Which parameters you can filter on are described below.
      operationId: getAllTickets
      produces:
        - application/json
      parameters:
        - name: X-BoB-AuthToken
          in: header
          description: JWT authentication token
          required: true
          type: string
        - name: pid
          in: query
          description: Filter on participant ID requesting the ticket
          required: False
          type: integer
          format: int64
        - name: requestId
          in: query
          description: Filter on request ID
          required: False
          type: string
        - name: travellerId
          in: query
          description: Filter on travellers ID
          required: False
          type: string
        - name: tokenId
          in: query
          description: Filter on token ID
          required: False
          type: string
        - name: active
          in: query
          description: Filter on active tickets
          required: False
          type: boolean
        - name: suspended
          in: query
          description: Filter on suspended tickets
          required: False
          type: boolean
        - name: refunded
          in: query
          description: Filter on refunded tickets
          required: False
          type: boolean
        - name: refundable
          in: query
          description: Filter on refundable tickets
          required: False
          type: boolean
        - name: hindered
          in: query
          description: Filter on tickets with hinderedStatus set
          required: False
          type: boolean
      responses:
        '200':
          description: |
            Successful operation, return list of tickets. If filter doesn't
            produce any matches an empty array will be returned.
          schema:
            type: array
            items:
              $ref: '#/definitions/ticket'
        '401':
          description: Unauthorised
    post:
      tags:
        - ticket
      summary: Issue tickets
      description: |
        Issue tickets from supplied manifest. The manifest should come from the
        product server for a matching participant id. Manifests from an unknown
        participants, expired manifest or with an illegal signature will be
        rejected.
      operationId: issueTickets
      produces:
        - application/json
      parameters:
        - name: X-BoB-AuthToken
          in: header
          description: JWT authentication token
          required: true
          type: string
        - name: manifestCall
          in: body
          description: Manifest to issue tickets from
          required: true
          schema:
            $ref: '#/definitions/manifestCall'
      responses:
        '201':
          description: Successful operation, return identifiers for issued tickets
          headers:
            location:
              description: "URI of created ticket bundle"
              type: string
          schema:
            $ref: '#/definitions/ticketIssueResponse'
        '303':
          description: Ticket already exists
          headers:
            location:
              description: "URI of the existing ticket"
              type: string
        '400':
          description: Manifest is invalid or from unknown participant
        '401':
          description: Unauthorised
  '/ticket/{ticketId}':
    get:
      tags:
        - ticket
      summary: Get ticket data and information
      description: |
        Get data and information about ticket with specified ticket identifier,
        issued by this server.
      operationId: getTicket
      produces:
        - application/json
      parameters:
        - name: X-BoB-AuthToken
          in: header
          description: JWT authentication token
          required: true
          type: string
        - name: ticketId
          in: path
          description: Ticket identifier
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/ticket'
        '401':
          description: Unauthorised
        '404':
          description: Ticket not found
    patch:
      tags:
        - ticket
      summary: Update ticket information
      description: |
        Update information about ticket with specified ticket identifier,
        issued by this server.
      operationId: updateTicket
      produces:
        - application/json
      parameters:
        - name: X-BoB-AuthToken
          in: header
          description: JWT authentication token
          required: true
          type: string
        - name: ticketId
          in: path
          description: Ticket identifier
          required: true
          type: string
        - name: ticketUpdateRequest
          in: body
          description: Ticket update
          required: true
          schema:
            $ref: '#/definitions/ticketUpdateRequest'
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/ticket'
        '401':
          description: Unauthorised
        '404':
          description: Ticket not found
  '/ticket/{ticketId}/refundableStatus':
    get:
      tags:
        - ticket
      summary: Get ticket refundable status
      description: |
        Get information if ticket specified with ticket identifier is
        refundable. If ticket is refundable also supply information
        about refundable amount and VAT.
      operationId: getTicketRefundableStatus
      produces:
        - application/json
      parameters:
        - name: X-BoB-AuthToken
          in: header
          description: JWT authentication token
          required: true
          type: string
        - name: ticketId
          in: path
          description: Ticket id
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/refundableStatus'
        '401':
          description: Unauthorised
        '404':
          description: Ticket not found
  '/ticket/{ticketId}/refundStatus':
    get:
      tags:
        - ticket
      summary: Get ticket refund status
      description: |
        Get information if ticket specified with ticket identifier has
        been refunded or not. If ticket was refunded also supply information
        about refunded amount and VAT.
      operationId: getTicketRefundStatus
      produces:
        - application/json
      parameters:
        - name: X-BoB-AuthToken
          in: header
          description: JWT authentication token
          required: true
          type: string
        - name: ticketId
          in: path
          description: Ticket id
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/refundStatus'
        '401':
          description: Unauthorised
        '404':
          description: Ticket not found
    put:
      tags:
        - ticket
      summary: Refund ticket
      description: |
        Refund ticket specified with ticket identifier.
      operationId: setTicketRefundStatus
      produces:
        - application/json
      parameters:
        - name: X-BoB-AuthToken
          in: header
          description: JWT authentication token
          required: true
          type: string
        - name: ticketId
          in: path
          description: Ticket id
          required: true
          type: string
      responses:
        '200':
          description: Successful operation, ticket was refunded
        '400':
          description: Ticket could not be refunded
        '401':
          description: Unauthorised
        '404':
          description: Ticket not found
  '/ticket/{ticketId}/recoverableStatus':
    get:
      tags:
        - ticket
      summary: Get ticket recoverable status
      description: |
        Get information if ticket specified with ticket identifier is
        recoverable. If ticket is refundable also supply information
        about recoverable amount and VAT.
      operationId: getTicketRecoverableStatus
      produces:
        - application/json
      parameters:
        - name: X-BoB-AuthToken
          in: header
          description: JWT authentication token
          required: true
          type: string
        - name: ticketId
          in: path
          description: Ticket identifier
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/recoverableStatus'
        '401':
          description: Unauthorised
        '404':
          description: Ticket not found
  '/ticket/{ticketId}/recoverStatus':
    get:
      tags:
        - ticket
      summary: Get ticket recover status
      operationId: getTicketRecoverStatus
      produces:
        - application/json
      parameters:
        - name: X-BoB-AuthToken
          in: header
          description: JWT authentication token
          required: true
          type: string
        - name: ticketId
          in: path
          description: Ticket identifier
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/recoverStatus'
        '401':
          description: Unauthorised
        '404':
          description: Ticket not found
    put:
      tags:
        - ticket
      summary: Recover ticket
      description: |
        Recover ticket specified with ticket identifier.
      operationId: setTicketRecoverStatus
      produces:
        - application/json
      parameters:
        - name: X-BoB-AuthToken
          in: header
          description: JWT authentication token
          required: true
          type: string
        - name: ticketId
          in: path
          description: Ticket id
          required: true
          type: string
      responses:
        '200':
          description: Successful operation, ticket recovered
        '400':
          description: Ticket could not be recovered
        '401':
          description: Unauthorised
        '404':
          description: Ticket not found
  '/ticket/{ticketId}/hinderedStatus':
    get:
      tags:
        - ticket
      summary: Get ticket hindered status
      description: |
        Get information if ticket specified with ticket identifier has
        hindered status set or not, e.g. there was a failure carrying out the
        services of the issued ticket.
      operationId: getTicketHinderedStatus
      produces:
        - application/json
      parameters:
        - name: X-BoB-AuthToken
          in: header
          description: JWT authentication token
          required: true
          type: string
        - name: ticketId
          in: path
          description: Ticket id
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/hinderedStatus'
        '401':
          description: Unauthorised
        '404':
          description: Ticket not found
    put:
      tags:
        - ticket
      summary: Set ticket hindered
      description: |
        Set ticket hindered status to indicate that the traveller was unable (hindered) to use it. Detail about the
        cause should be set for the ticket that is marked as hindered when using this operation.
      operationId: setTicketHinderedStatus
      produces:
        - application/json
      parameters:
        - name: X-BoB-AuthToken
          in: header
          description: JWT authentication token
          required: true
          type: string
        - name: ticketId
          in: path
          description: Ticket id
          required: true
          type: string
        - name: hinderedCause
          in: body
          description: Hindered details
          required: true
          schema:
            $ref: '#/definitions/hinderedCause'
      responses:
        '200':
          description: Successful operation, ticket hindered status set
        '400':
          description: Ticket hindered status could not be set
        '401':
          description: Unauthorised
        '404':
          description: Ticket not found
  '/ticket/{ticketId}/revoke':
    put:
      tags:
        - ticket
      summary: Revoke ticket
      description: |
        Revoke is used to set the specified ticketId in revoked state and to add the ticketId to a blacklist used in validation/inspection.
        When a ticket is in revoked state it can not be used for travel. 
        Revocation of a ticket can occur for several reasons, for instance if a ticket is refunded, in cases of fraud, by request from the ticket owner, in cases of loss etc.
      operationId: setTicketRevokeStatus
      produces:
        - application/json
      parameters:
        - name: X-BoB-AuthToken
          in: header
          description: JWT authentication token
          required: true
          type: string
        - name: ticketId
          in: path
          description: Ticket identifier
          required: true
          type: string
      responses:
        '200':
          description: Successful operation, ticket in revoved state.
        '401':
          description: Unauthorised
        '404':
          description: Ticket not found
  '/ticket/{ticketId}/active':
    get:
      tags:
        - ticket
      summary: Get ticket active status
      description: |
        Get active status for ticket with specified ticket identifier.
      operationId: getTicketActiveStatus
      produces:
        - application/json
      parameters:
        - name: X-BoB-AuthToken
          in: header
          description: JWT authentication token
          required: true
          type: string
        - name: ticketId
          in: path
          description: Ticket id
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/ticketActiveStatus'
        '401':
          description: Unauthorised
        '404':
          description: Ticket not found
    put:
      tags:
        - ticket
      summary: Freeze or thaw ticket
      description: |
       Freeze or thaw ticket with specified ticket identifier.
      operationId: setTicketActiveStatus
      produces:
        - application/json
      parameters:
        - name: X-BoB-AuthToken
          in: header
          description: JWT authentication token
          required: true
          type: string
        - name: ticketId
          in: path
          description: Ticket identifier
          required: true
          type: string
        - name: activeStatus
          description: |
            Set to true to thaw ticket, false to freeze. A ticket must be active to be able
            to use it.
          in: body
          required: true
          schema:
            $ref: '#/definitions/ticketActiveStatus'
      responses:
        '200':
          description: Successful operation, ticket is now inactive
        '401':
          description: Unauthorised
        '404':
          description: Ticket not found
  '/ticket/{ticketId}/activationStatus':
    get:
      tags:
        - ticket
      summary: Get ticket activation status
      description: |
        Get activation status for ticket with specified ticket identifier.
      operationId: getTicketActivationStatus
      produces:
        - application/json
      parameters:
        - name: X-BoB-AuthToken
          in: header
          description: JWT authentication token
          required: true
          type: string
        - name: ticketId
          in: path
          description: Ticket id
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/ticketActivationStatus'
        '401':
          description: Unauthorised
        '404':
          description: Ticket not found
  '/ticket/{ticketId}/suspended':
    get:
      tags:
        - ticket
      summary: Get ticket suspension status
      description: |
        Get suspension status for ticket with specified ticket identifier.
      operationId: getTicketSuspensionStatus
      produces:
        - application/json
      parameters:
        - name: X-BoB-AuthToken
          in: header
          description: JWT authentication token
          required: true
          type: string
        - name: ticketId
          in: path
          description: Ticket id
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/suspensionStatus'
        '401':
          description: Unauthorised
        '404':
          description: Ticket not found
  '/ticket/{ticketId}/event':
    get:
      tags:
        - ticket
      summary: Get ticket events
      description: |
        Get all ticket events for specified ticket identifier. If no
        events are available an empty list will be returned.
      operationId: ticketEvents
      produces:
        - application/json
      parameters:
        - name: X-BoB-AuthToken
          in: header
          description: JWT authentication token
          required: true
          type: string
        - name: ticketId
          in: path
          description: Ticket identifier
          required: true
          type: string
      responses:
        '200':
          description: Successful operation, list of all events for specified ticket identifier.
          schema:
            type: array
            items:
              $ref: '#/definitions/ticketEventResult'
        '401':
          description: Unauthorised
        '404':
          description: Ticket not found
  '/ticket/{ticketId}/event/{eventId}':
    get:
      tags:
        - ticket
      summary: Get ticket event
      description: |
        Get ticket event specified with event identifier and ticket identifier.
        Note! this is the server event identifier and not the local event identfier.
      operationId: ticketEvent
      produces:
        - application/json
      parameters:
        - name: X-BoB-AuthToken
          in: header
          description: JWT authentication token
          required: true
          type: string
        - name: ticketId
          in: path
          description: Ticket identifier
          required: true
          type: string
        - name: eventId
          in: path
          description: Event identifier
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/ticketEventResult'
        '401':
          description: Unauthorised
        '404':
          description: Ticket and event combination not found
  '/ticketbundle':
    post:
      tags:
        - ticket
      summary: Create new ticket bundle
      description: |
        Create a new ticket bundle containing that is a subset of another ticket bundle.
        The tickets are specified in the request payload as a list of ticket identfiers.
      operationId: createTicketBundle
      produces:
        - application/json
      parameters:
        - name: X-BoB-AuthToken
          in: header
          description: JWT authentication token
          required: true
          type: string
        - name: ticketBundleRequest
          in: body
          description: List of ticket identifiers of tickets to be included in ticket bundle
          required: true
          schema:
            $ref: '#/definitions/ticketBundleRequest'
      responses:
        '201':
          description: Successful operation
          headers:
            location:
              description: URI of created ticket bundle
              type: string
          schema:
            $ref: '#/definitions/ticketBundle'
        '400':
          description: All the ticket didn't come from the same ticket bundle
        '401':
          description: Unauthorised
  '/ticketbundle/{ticketBundleId}':
    get:
      tags:
        - ticket
      summary: Get ticket bundle
      description: Get ticket bundle specified by the ticket bundle identifier
      operationId: getTicketBundle
      produces:
        - application/json
      parameters:
        - name: X-BoB-AuthToken
          in: header
          description: JWT authentication token
          required: true
          type: string
        - name: ticketBundleId
          in: path
          description: Ticket bundle id
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/ticketBundle'
        '401':
          description: Unauthorised
        '404':
          description: Ticket bundle not found
definitions:
  ticketEventResult:
    description: |
      The result of a ticket inspection or validation operation registration
    type: object
    properties:
      ticketEventPassengerMessage:
        description: |
          Message to be presented to passenger when registering an inspection
          or validation event
        type: string
      ticketEventInspectMessage:
        description: |
          Message to be presented to inspector when registering an inspection event
        type: string
      ticketEventStatus:
        description: |
          Status code for inspection or validation event
        type: integer
        format: int32
      ticketMetadata:
        $ref: '#/definitions/ticketMetadata'
      ticketEvent:
        $ref: '#/definitions/ticketEvent'
  ticketBundleRequest:
    description: List of ticket identifiers of tickets to be included in ticket bundle
    type: object
    required:
      - ticketIds
    properties:
      ticketIds:
        description: List ticket identifiers
        type: array
        items:
          type: string
      tokenIssuer:
        description: PID of token issuer
        type: integer
        format: int64
      tokenId:
        type: string
      tokenPublicKey:
        $ref: '#/definitions/jwkPublic'
  ticketMetadata:
    description: Metadata associated with a ticket
    type: object
    properties:
      relativeValidityStart:
        description: Start of ticket's relative validity period in ISO 8601:2004 profile extended format (MTS8, chapter 2.3)
        example: 2020-01-22T03:00:00Z
        format: date-time
        type: string
      travellerPhotoURL:
        description: URL to photo of traveller
        type: string
      ticketEventIds:
        description: List of all event identifiers associated with this ticket
        type: array
        items:
          type: string
  geoPosition:
    description: Geographical position (WGS84 decimal)
    type: object
    required:
     - lat
     - long
    properties:
      lat:
        description: Latitude
        type: number
        format: double
      long:
        description: Longitude
        type: number
        format: double
      alt:
        description: Altitude
        type: number
        format: double
  ticketEvent:
    description: Ticket event data from inspection or validator device
    type: object
    required:
      - time
      - ticketId
    properties:
      time:
        description: Time stamp as ISO 8601:2004 profile extended format (MTS8, chapter 2.3)
        format: date-time
        type: string
      ticketId:
        description: Unique identifier for ticket
        type: string
      eventId:
        description: Event identifier (allocated at event creation)
        type: string
      localEventId:
        description: Event identifier (allocated at validation/inspection)
        type: string
      eventType:
        description: Type of event, inspection or validation
        type: string
        enum:
          - inspection
          - validation
      eventResult:
        title: Result code
        description: |
          0 = success
          1 = other failure
          2 = failed spatial constraints
          3 = failed time constraints
          4 = failed device header conditions
          5 = failed issuer signature validation
          6 = failed device signature validation
          7 = failed blacklist check
          8 = failed passback check
          9 = failed fraud check
        type: integer
        enum:
          - 0
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6
          - 7
          - 8
          - 9
      eventReason:
        description: Reason for failure/success
        type: string
      mtbReference:
        description: MTB reference
        $ref: '#/definitions/mtbReference'
      deviceReference:
        description: Device reference, unique reference for device that creates device signed tickets
        $ref: '#/definitions/deviceReference'
      geo:
        description: Geographical position (WGS84 decimal)
        $ref: '#/definitions/geoPosition'
      modeOfTransport:
        description: Mode of transport (e.g., bus, train or tram)
        type: string
      zone:
        description: Zone information
        type: object
        required:
          - pid
          - zoneId
        properties:
          pid:
            description: Participant identifier associated with zone
            type: integer
            format: int64
          zoneId:
            description: Zone identifier
            type: string
      service:
        description: Service information
        type: object
        required:
          - pid
          - serviceId
        properties:
          pid:
            description: Participant identifier associated with service, trip and block
            type: integer
            format: int64
          serviceId:
            description: Service identifier
            type: string
          tripId:
            description: Trip identifier
            type: string
          blockId:
            description: Block identifier
            type: string
      stopArea:
        description: Stop area information
        type: object
        required:
          - pid
          - stopAreaId
        properties:
          pid:
            description: Participant identifier associated with stop area
            type: integer
            format: int64
          stopAreaId:
            description: Identifier for current stop area
            type: string
          nextStopAreaId:
            description: Identifier for next stop area
            type: string
      validator:
        type: object
        properties:
          validatorId:
            description: What validator originated the event
            type: string
          location:
            description: Where is validator mounted (e.g., vehicle number)
            type: string
          sublocation:
            description: More specific location information (e.g., door number)
            type: string
      operatingDayDate:
        description: Date of the operating day
        format: date
        type: string
      tokenTransaction:
        $ref: '#/definitions/tokenTransaction'
  ticketActiveStatus:
    description: True if ticket is active and ready to use, otherwise false.
    type: boolean
  ticketActivationStatus:
    description: Activation status
    type: object
    required:
      - active
    properties:
      active:
        description: 'True if ticket is active and ready to use, otherwise false.'
        type: boolean
      relativeValidity:
        description: Validity period in ISO 8601 duration format
        type: string
        example: PT24H
      latestActivation:
        description: Date and time for latest activation
        type: string
        format: date-time
        example: '2020-08-28T14:20:39+00:00'
      latestActivationExpire:
        description: Date and time for expiration of latest activation
        type: string
        format: date-time
        example: '2020-08-29T03:00:00+00:00'
      remainingActivations:
        description: |
          Remaining number of times the product set can be activated
        type: integer
        format: int64
        example: 1
  suspensionStatus:
    description: Suspension status
    type: object
    required:
      - suspended
    properties:
      suspended:
        description: 'True if ticket is suspended from use, otherwise false.'
        type: boolean
      suspensionExpire:
        description: Date and time for expiration of the suspension status
        type: string
        format: date-time
        example: '2020-08-29T03:00:00+00:00'
  manifestCall:
    description: Manifest with parameter to be used for issuing tickets
    type: object
    required:
      - manifestMtbTemplate
    properties:
      manifestMtbTemplate:
        description: Signed manifest with MTB template
        type: string
        format: base64url
      ticketHolder:
        description: Traveller to register as ticket holder
        $ref: '#/definitions/ticketHolder'
      tokenIssuer:
        description: PID of token issuer
        type: integer
        format: int64
      tokenId:
        type: string
      tokenPublicKey:
        $ref: '#/definitions/jwkPublic'
      recoverTicketId:
        description: ID of ticket in recover state to be recovered in operation
        type: string
      issueMtb:
        description: Set to true to return MTB when tickets are issued
        type: boolean
      requestId:
        description: |
          Request identifier allocated by ticket requestor.
          This property is not yet required, but SHOULD be provided in order to
          detect retransmissions. Even though the scope of this property is
          (pid,entity_id), it is RECOMMENDED that it is generated as globally
          unique using UUIDv4.
          As the ticket issuer may use the requestId as a billing/payment
          reference for the ticket issued as a result of the request, the
          requestor is advised to keep it for future reference.
        type: string
        example: fc4a1663-e85f-45a3-9b7f-e09758dd2d6d
      startOfValidity:
        description: Request start of validity set in the future (must be within the validity time of the manifest). Time stamp as ISO 8601:2004 profile extended format (MTS8, chapter 2.3)
        format: date-time
        type: string
      bookingId:
        description: Booking identifier from Booking API
        type: string
  recoverStatus:
    description: Recover status
    type: object
    required:
      - recovered
    properties:
      recovered:
        description: True if ticket is in recovered state
        type: boolean
      recoveredAmount:
        description: Fare recovered
        $ref: '#/definitions/fare'
  recoverableStatus:
    description: Tells if ticket is recoverable and amount recoverable
    type: object
    required:
      - recoverable
    properties:
      recoverable:
        description: Is ticket recoverable
        type: boolean
      recoverableAmount:
        description: Recovereable fare
        $ref: '#/definitions/fare'
  refundStatus:
    description: Refund status
    type: object
    required:
      - refunded
    properties:
      refunded:
        description: True if ticket is in refunded state
        type: boolean
      refundedAmount:
        description: Fare refunded
        $ref: '#/definitions/fare'
  refundableStatus:
    description: Tells if ticket is refundable and amount refundable
    type: object
    required:
      - refundable
    properties:
      refundable:
        description: Is ticket refundable
        type: boolean
      refundableAmount:
        description: Refundable fare
        $ref: '#/definitions/fare'
  hinderedStatus:
    description: Hindered status
    type: object
    required:
      - hindered
    properties:
      hindered:
        description: True if traveller was hindered to use the ticket services
        type: boolean
      hinderedCause:
        description: Type of cause. Detail on why ticket was hindered.
        $ref: '#/definitions/hinderedCause'
      refundableAmount:
        description: Refundable fare (optional)
        $ref: '#/definitions/fare'
  hinderedCause:
    description: Type of cause
    type: string
    enum:
      - travellerHindered
      - operatorHindered
      - forceMajeure
  fare:
    description: Fare information, amount, currency and VAT
    type: object
    required:
      - amount
      - currency
      - vatAmount
      - vatPercent
    properties:
      amount:
        description: Fare cost excluding VAT
        type: number
        format: float
      currency:
        description: Currency code (ISO 4217)
        type: string
      vatAmount:
        description: VAT amount
        type: number
        format: float
      vatPercent:
        description: VAT percent
        type: number
        format: float
  ticketHolder:
    description: Ticket holders name and identifier
    type: object
    required:
      - travellerId
    properties:
      travellerId:
        type: string
        description: Unique traveller identifier
      travellerName:
        description: Display name of traveller
        type: string
  ticket:
    description: Ticket data and status
    type: object
    required:
      - ticketId
      - issuedAt
      - ticketPayload
    properties:
      ticketId:
        description: Unique identifier for ticket
        type: string
      issuedAt:
        description: Time stamp as ISO 8601:2004 profile extended format (MTS8, chapter 2.3)
        format: date-time
        type: string
      ticketPayload:
        description: Ticket payload as base64url encoded JSON
        type: string
        format: base64url
      mtb:
        description: Signed MTB container
        type: string
        format: base64url
      tokenId:
        description: Token to which the ticket is bound
        type: string
        x-nullable: true
      tokenIssuer:
        description: PID of token issuer
        type: integer
        format: int64
        x-nullable: true
      ticketHolder:
        description: Ticket holder
        $ref: '#/definitions/ticketHolder'
      activeStatus:
        description: Ticket active status
        $ref: '#/definitions/ticketActiveStatus'
      activationStatus:
        description: Ticket activation status
        $ref: '#/definitions/ticketActivationStatus'
      recoverStatus:
        description: Ticket recover status
        $ref: '#/definitions/recoverStatus'
      refundStatus:
        description: Ticket refund status
        $ref: '#/definitions/refundStatus'
      refundableStatus:
        description: Ticket refundable status
        $ref: '#/definitions/refundableStatus'
      hinderedStatus:
        description: Ticket hindered status
        $ref: '#/definitions/hinderedStatus'
      suspendedStatus:
        description: Ticket suspension status
        $ref: '#/definitions/suspensionStatus'
  ticketUpdateRequest:
    description: Ticket update
    type: object
    properties:
      tokenIssuer:
        description: PID of token issuer
        type: integer
        format: int64
        x-nullable: true
      tokenId:
        type: string
        x-nullable: true
      tokenPublicKey:
        $ref: '#/definitions/jwkPublic'
        x-nullable: true
      startOfValidity:
        description: Request start of validity set in the future (must be within the validity time of the manifest). Time stamp as ISO 8601:2004 profile extended format (MTS8, chapter 2.3)
        format: date-time
        type: string
  ticketBundle:
    description: |
      A group of tickets. All tickets must come from the same manifest
      used to issue the tickets.
    type: object
    required:
      - ticketBundleId
      - mtb
    properties:
      ticketBundleId:
        description: Unique ticket bundle identifier
        type: string
      ticketIds:
        description: Array of identifiers to tickets in bundle
        type: array
        items:
          type: string
      settlementId:
        description: Unique settlement identifier for tickets in bundle
        type: string
      manifestId:
        description: Unique manifest identifier for issued tickets
        type: string
      mtb:
        description: Signed MTB container
        type: string
        format: base64url
  ticketIssueResponse:
    type: object
    required:
      - ticketIds
      - settlementId
    properties:
      ticketIds:
        description: Array of identifiers to issued tickets
        type: array
        items:
          type: string
      settlementId:
        description: Unique settlement identifier for issued tickets
        type: string
      ticketBundle:
        $ref: '#/definitions/ticketBundle'
  mtbReference:
    description: MTB reference
    type: object
    required:
     - pid
     - issuerSignature
    properties:
      pid:
        description: Participant identifier
        type: integer
        format: int64
      issuerSignature:
        description: MTB issuer signature
        type: string
        format: base64url
  deviceReference:
    description: Device reference, unique reference for device that creates device signed tickets
    type: object
    required:
     - pid
     - did
    properties:
      pid:
        description: Participant identifier
        type: integer
        format: int64
      did:
        description: Device identifier
        type: string
        format: base64url
  tokenTransaction:
    type: object
    required:
      - tpk
      - aiData
      - aiRequest
      - aiResponse
    properties:
      tpk:
        $ref: '#/definitions/jwkPublic'
      aiData:
        $ref: '#/definitions/aiData'
      aiRequest:
        $ref: '#/definitions/aiRequest'
      aiResponse:
        $ref: '#/definitions/aiResponse'
  jwkPublic:
    type: object
    description: Public JSON Web Key (RFC 7517)
    required:
      - kty
      - kid
    properties:
      kty:
        description: JWA key type
        type: string
        enum:
          - RSA
          - EC
        example: EC
      kid:
        description: JWK key identifier
        type: string
        example: k2
      crv:
        description: Curve type (required for kty=EC)
        type: string
        example: "P-256"
      x:
        description: EC x coordinate (required for kty=EC)
        type: string
        format: byte
        example: "f83OJ3D2xF1Bg8vub9tLe1gHMzV76e8Tus9uPHvRVEU"
      y:
        description: EC y coordinate (required for kty=EC)
        type: string
        format: byte
        example: "x_FEzRu9m36HLN_tue659LNpXW6pCyStikYjKIWI5a0"
      n:
        description: RSA modulus parameter (required for kty=RSA)
        type: string
        format: byte
      e:
        description: RSA exponent parameter (required for kty=RSA)
        type: string
        format: byte
  aiData:
    description: Data used to produce Authentication input for token authentication
    type: object
    required:
      - time
      - terminalId
    properties:
      pid:
        description: Terminal Participant Identifier
        type: integer
        format: int64
      terminalId:
        description: Identifier of the terminal
        type: string
      aid:
        description: Full AID (in lowercase hex) as read from the PICC
        type: string
      signatureCounter:
        description: Signature counter as read from the PICC
        type: integer
        format: int64
      time:
        description: Current time as ISO 8601:2004 profile extended format (MTS8, chapter 2.3)
        type: string
        format: date-time
      loc:
        description: Current geographical location of the terminal (WGS84 decimal tuple)
        type: string
        pattern: "^\\-?[0-9]*(\\.[0-9]+)?,\\-?[0-9]*(\\.[0-9]+)?$"
  aiRequest:
    description: Authentication request as sent to the PICC
    type: string
    format: base64url
  aiResponse:
    description: Authentication response as received from PICC
    type: string
    format: base64url

swagger: '2.0'
info:
  version: 3.0.0
  title: BoB.Validation.API
host: schemas.mobileticket.se
basePath: /api/v3
schemes:
  - https
paths:
  '/validation/{ticketId}':
    post:
      tags:
        - validation
      summary: Validate ticket by Ticket ID
      description: |
        Validate ticket by Ticket ID and return a reference to a ticket event.
        Online validation  - If an eventResult is not provided, the result of
                             the validation is not known and the server is
                             requested to perform validation. In this case, the
                             entire MTB must be submitted via a query parameter.
        Offline validation - If an eventResult is provided, the result of the
                             validation is known and the server does not have to
                             perform validation. In this case, the entire MTB
                             does not need to be submitted via a query
                             parameter.
      operationId: validateTicket
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: X-BoB-AuthToken
          in: header
          description: JWT authentication token
          required: true
          type: string
        - name: ticketId
          in: path
          description: Ticket Identifier
          required: true
          type: string
          format: string
        - name: validationEvent
          in: body
          description: Validation event
          required: true
          schema:
            $ref: '#/definitions/ticketEvent'
        - name: mtb
          in: query
          description: MTB
          required: false
          type: string
          format: base64url
      responses:
        '201':
          description: created
          headers:
            location:
              description: "URI of the new ticketEvent"
              type: string
          schema:
            $ref: '#/definitions/ticketEventResult'
        '303':
          description: Ticket event already exists
          headers:
            location:
              description: "URI of the existing ticketEvent"
              type: string
        '401':
          description: unauthorised
        '404':
          description: ticket not found
  '/validation':
    post:
      tags:
        - validation
      summary: Report already performed validations
      description: |
        Already performed offline validations may be submitted in batch via
        validationReport. The entire batch must be accepted/rejected - there's
        no status reporting on individual events. Online validation is not
        supported.
      operationId: reportValidations
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: X-BoB-AuthToken
          in: header
          description: JWT authentication token
          required: true
          type: string
        - name: validationReport
          in: body
          description: Validation report
          required: true
          schema:
            $ref: '#/definitions/validationReport'
      responses:
        '200':
          description: successful operation
        '401':
          description: unauthorised
  '/blacklist':
    get:
      tags:
        - blacklist
      summary: Get blacklist
      description: |
        Blacklists are used, as the name indicates, to block certain
        elements (tickets, travellers or tokens) from an otherwise
        successful validation. The current ticket/token/traveller
        blacklist is provided via the getBlacklist call. Only
        blacklist entries added since the provided blacklistEntryId
        will be returned. There's no guarantee that the entries will
        be provided in consecutive order nor that no blacklistEntryId
        will be skipped. Blacklist entries may contain an expire
        property. Expired entries may be discarded/ignored by the caller.
      operationId: getBlacklist
      produces:
        - application/json
      parameters:
        - name: X-BoB-AuthToken
          in: header
          description: JWT authentication token
          required: true
          type: string
        - name: blacklistEntryId
          in: query
          description: Get blacklist entries added after blacklistEntryId
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: ok
          schema:
            $ref: '#/definitions/blacklist'
        '401':
          description: unauthorised
        '404':
          description: blacklist not found
  '/whitelist':
    get:
      tags:
        - whitelist
      summary: Get whitelist
      description: |
        The whitelist is a mechamism used with ID-based travelling
        where the travel entitlements tied to a certain token is
        distriubuted to the validating devices. The purpose of the
        whitelist function is to account for situations where online
        checks are unreliable. By having the validating devices
        looking up travel entitlements locally from the whitelist,
        validation can be performed reliably and securely even in
        offline scenarios or when connections to the validation
        endpoint is slow. Each whitelist entry contains the ticket
        information required to perform the same validation as had
        the ticket information been conveyed through the MTB.
      operationId: getWhitelist
      produces:
        - application/json
      parameters:
        - name: X-BoB-AuthToken
          in: header
          description: JWT authentication token
          required: true
          type: string
        - name: whitelistEntryId
          in: query
          description: Get whitelist entries added after whitelistEntryId
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: ok
          schema:
            $ref: '#/definitions/whitelist'
        '401':
          description: unauthorised
        '404':
          description: whitelist not found
  '/ticklemacros':
    get:
      tags:
        - validation
      summary: Get all TICKLE macro sets
      description: |
        Retrieve all TICKLE macro sets. There is no expire mechanism
        and validators are expected to update TICKLE macros periodically.
      operationId: getAllTickleMacrosets
      parameters:
        - name: X-BoB-AuthToken
          in: header
          description: JWT authentication token
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation, return TICKLE macro sets
          schema:
            type: array
            items:
              $ref: '#/definitions/tickleMacros'
        '404':
          description: No TICKLE macro sets found
  '/ticklemacros/{serial}':
    get:
      tags:
        - validation
      summary: Get TICKLE macros set
      description: |
        Retrieve a TICKLE macro set for a specific serial number. There is no expire
        mechanism and validators are expected to update TICKLE macros periodically.
      operationId: getTickleMacroset
      produces:
        - application/json
      parameters:
        - name: X-BoB-AuthToken
          in: header
          description: JWT authentication token
          required: true
          type: string
        - name: serial
          in: path
          description: Get TICKLE macros with the specified serial number
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Successful operation, return TICKLE macro set
          schema:
            $ref: '#/definitions/tickleMacros'
        '404':
          description: TICKLE macro set not found
  '/fraudcheck':
    get:
      tags:
        - fraudcheck
      summary: Get time and distance delta of last validation event
      description: |
        The fraudcheck call results in a velocity calculated as follows:
        - The caller provides a reference to a MTB, a time and
          geographical position
        - The callee looks up the time and geographical position of the
          last ticket event for the given MTB
        - The callee returns the calculated velocity given the time/geopos
        The response must only be given once per validation event and client.
        Velocity less than km/h or distances less than 1 km shall render 0 km/h.
        The resulting velocity is used to determine possible fraud. If the
        velocity is higher than any available mode of transportation, the
        ticket has most likely been copied and presented at different locations.
      operationId: fraudcheck
      produces:
        - application/json
      parameters:
        - name: X-BoB-AuthToken
          in: header
          description: JWT authentication token
          required: true
          type: string
        - name: fraudcheckData
          in: body
          description: Validated MTB, time and position
          required: true
          schema:
            $ref: '#/definitions/fraudcheckData'
      responses:
        '200':
          description: ok
          schema:
            $ref: '#/definitions/fraudcheckResponse'
        '501':
          description: not implemented
        '401':
          description: unauthorised
        '403':
          description: forbidden
definitions:
  fraudcheckData:
    description: N.B. - fraud check data MUST NOT be retained by respondent
    type: object
    required:
      - geo
      - mtbReference
    properties:
      time:
        description: Time stamp as ISO 8601:2004 profile extended format (MTS8, chapter 2.3)
        format: date-time
        type: string
      geo:
        $ref: '#/definitions/geoPosition'
      mtbReference:
        $ref: '#/definitions/mtbReference'
  fraudcheckResponse:
    description: N.B. - response MUST only be given once per validation event and client. Velocity <= 5 km/h or distance <= 1 km shall render 0 km/h.
    type: object
    required:
      - velocity
    properties:
      velocity:
        description: Travel velocity in kilometers per hour based on nearest validation event (in time)
        type: number
        format: float
  blacklist:
    type: array
    items:
      $ref: '#/definitions/blacklistEntry'
  blacklistEntry:
    type: object
    required:
      - blacklistEntryId
    properties:
      blacklistEntryId:
        description: Ever increasing blacklist entry identifier
        type: integer
        format: int64
      ticketId:
        type: string
      travellerId:
        type: string
      tokenId:
        type: string
      expire:
        description: Expire time stamp as ISO 8601:2004 profile extended format (MTS8, chapter 2.3)
        format: date-time
        type: string
  whitelist:
    type: array
    items:
      $ref: '#/definitions/whitelistEntry'
  whitelistEntry:
    type: object
    required:
      - id
      - kid
      - mtb
      - val
    properties:
      id:
        description: Ever increasing whitelist entry identifier
        type: integer
        format: int64
      kid:
        description: Whitelisted token public key thumbprint
        type: string
      mtb:
        description: Signed MTB container
        type: string
        format: base64url
      priority:
        description: MTB priority (lower is better)
        type: integer
        format: int64
      val:
        description: Entry validity period as ISO 8601:2004 time interval format (MTS8, chapter 2.5) in start/end or start/duration format
        type: string
  validationReport:
    type: array
    items:
      $ref: '#/definitions/ticketEvent'
  geoPosition:
    description: Geographical position (WGS84 decimal)
    type: object
    required:
      - lat
      - long
    properties:
      lat:
        description: Latitude
        type: number
        format: double
      long:
        description: Longitude
        type: number
        format: double
      alt:
        description: Altitude
        type: number
        format: double
  mtbReference:
    description: MTB reference
    type: object
    required:
      - pid
      - issuerSignature
    properties:
      pid:
        description: Participant identifier
        type: integer
        format: int64
      issuerSignature:
        description: MTB issuer signature
        type: string
        format: base64url
  deviceReference:
    description: Device reference, unique reference for device that creates device signed tickets
    type: object
    required:
      - pid
      - did
    properties:
      pid:
        description: Participant identifier
        type: integer
        format: int64
      did:
        description: Device identifier
        type: string
        format: base64url
  ticketEventResult:
    description: |
      The result of a ticket inspection or validation operation registration
    type: object
    properties:
      ticketEventPassengerMessage:
        description: |
          Message to be presented to passenger when registering an inspection
          or validation event
        type: string
      ticketEventInspectMessage:
        description: |
          Message to be presented to inspector when registering an inspection event
        type: string
      ticketEventStatus:
        description: |
          Status code for inspection or validation event
        type: integer
        format: int32
      ticketMetadata:
        $ref: '#/definitions/ticketMetadata'
      ticketEvent:
        $ref: '#/definitions/ticketEvent'
  ticketMetadata:
    description: Metadata associated with a ticket
    type: object
    properties:
      relativeValidityStart:
        description: Start of ticket validity period as ISO 8601:2004 profile extended format (MTS8, chapter 2.3)
        format: date-time
        type: string
      travellerPhotoURL:
        description: URL to photo of traveller
        type: string
      ticketEventIds:
        description: List of all event identifiers associated with this ticket
        type: array
        items:
          type: string
  ticketEvent:
    description: Ticket event data from inspection or validator device
    type: object
    required:
      - time
      - ticketId
      - localEventId
    properties:
      time:
        description: Time stamp as ISO 8601:2004 profile extended format (MTS8, chapter 2.3)
        format: date-time
        type: string
      ticketId:
        description: Unique identifier for ticket
        type: string
      eventId:
        description: Event identifier (allocated at event creation)
        type: string
      localEventId:
        description: |
          Event identifier (allocated at validation/inspection).
          This property MUST be provided in order to detect retransmissions.
          Even though the scope of this property is (pid,entity_id), it is
          RECOMMENDED that it is generated as globally unique using UUIDv4.
        type: string
        example: fc4a1663-e85f-45a3-9b7f-e09758dd2d6d
      eventType:
        description: Type of event, inspection or validation
        type: string
        enum:
          - inspection
          - validation
      eventResult:
        title: Result code
        description: |
          0 = success
          1 = other failure
          2 = failed spatial constraints
          3 = failed time constraints
          4 = failed device header conditions
          5 = failed issuer signature validation
          6 = failed device signature validation
          7 = failed blacklist check
          8 = failed passback check
          9 = failed fraud check
        type: integer
        enum:
          - 0
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6
          - 7
          - 8
          - 9
      eventReason:
        description: Reason for failure/success
        type: string
      mtbReference:
        description: MTB reference
        $ref: '#/definitions/mtbReference'
      deviceReference:
        description: Device reference, unique reference for device that creates device signed tickets
        $ref: '#/definitions/deviceReference'
      geo:
        description: Geographical position (WGS84 decimal)
        $ref: '#/definitions/geoPosition'
      modeOfTransport:
        description: Mode of transport (e.g., bus, train or tram)
        type: string
      zone:
        description: Zone information
        type: object
        required:
          - pid
          - zoneId
        properties:
          pid:
            description: Participant identifier associated with zone
            type: integer
            format: int64
          zoneId:
            description: Zone identifier
            type: string
      service:
        description: Service information
        type: object
        required:
          - pid
          - serviceId
        properties:
          pid:
            description: Participant identifier associated with service, trip and block
            type: integer
            format: int64
          serviceId:
            description: Service identifier
            type: string
          tripId:
            description: Trip identifier
            type: string
          blockId:
            description: Block identifier
            type: string
      stopArea:
        description: Stop area information
        type: object
        required:
          - pid
          - stopAreaId
        properties:
          pid:
            description: Participant identifier associated with stop area
            type: integer
            format: int64
          stopAreaId:
            description: Identifier for current stop area
            type: string
          nextStopAreaId:
            description: Identifier for next stop area
            type: string
      validator:
        type: object
        properties:
          validatorId:
            description: What validator originated the event
            type: string
          location:
            description: Where is validator mounted (e.g., vehicle number)
            type: string
          sublocation:
            description: More specific location information (e.g., door number)
            type: string
      operatingDayDate:
        description: Date of the operating day
        format: date
        type: string
      tokenTransaction:
        $ref: '#/definitions/tokenTransaction'
  tickleMacros:
    type: object
    required:
      - pid
      - serial
      - macros
    properties:
      pid:
        type: integer
        format: int64
      serial:
        type: integer
        format: int64
      macros:
        type: array
        items:
          $ref: '#/definitions/tickleMacro'
  tickleMacro:
    type: object
    required:
      - name
      - condition
    properties:
      name:
        type: string
      description:
        type: string
      condition:
        type: string
  tokenTransaction:
    type: object
    required:
      - tpk
      - aiData
      - aiRequest
      - aiResponse
    properties:
      tpk:
        $ref: '#/definitions/jwkPublic'
      aiData:
        $ref: '#/definitions/aiData'
      aiRequest:
        $ref: '#/definitions/aiRequest'
      aiResponse:
        $ref: '#/definitions/aiResponse'
  jwkPublic:
    type: object
    description: Public JSON Web Key (RFC 7517)
    required:
      - kty
      - kid
    properties:
      kty:
        description: JWA key type
        type: string
        enum:
          - RSA
          - EC
        example: EC
      kid:
        description: JWK key identifier
        type: string
        example: k2
      crv:
        description: Curve type (required for kty=EC)
        type: string
        example: "P-256"
      x:
        description: EC x coordinate (required for kty=EC)
        type: string
        format: byte
        example: "f83OJ3D2xF1Bg8vub9tLe1gHMzV76e8Tus9uPHvRVEU"
      y:
        description: EC y coordinate (required for kty=EC)
        type: string
        format: byte
        example: "x_FEzRu9m36HLN_tue659LNpXW6pCyStikYjKIWI5a0"
      n:
        description: RSA modulus parameter (required for kty=RSA)
        type: string
        format: byte
      e:
        description: RSA exponent parameter (required for kty=RSA)
        type: string
        format: byte
  aiData:
    description: Data used to produce Authentication input for token authentication
    type: object
    required:
      - time
      - terminalId
    properties:
      pid:
        description: Terminal Participant Identifier
        type: integer
        format: int64
      terminalId:
        description: Identifier of the terminal
        type: string
      aid:
        description: Full AID (in lowercase hex) as read from the PICC
        type: string
      signatureCounter:
        description: Signature counter as read from the PICC
        type: integer
        format: int64
      time:
        description: Current time as ISO 8601:2004 profile extended format (MTS8, chapter 2.3)
        type: string
        format: date-time
      loc:
        description: Current geographical location of the terminal (WGS84 decimal tuple)
        type: string
        pattern: "^\\-?[0-9]*(\\.[0-9]+)?,\\-?[0-9]*(\\.[0-9]+)?$"
  aiRequest:
    description: Authentication request as sent to the PICC
    type: string
    format: base64url
  aiResponse:
    description: Authentication response as received from PICC
    type: string
    format: base64url
